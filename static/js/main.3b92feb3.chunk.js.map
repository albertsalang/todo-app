{"version":3,"sources":["components/FormTask.js","components/TaskRow.js","components/TaskTable.js","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","tasks","dispatch","addTask","newTask","type","useState","inputTaskName","setInputTaskName","displayErrorEmpty","setDisplayErrorEmpty","displayErrorExists","setDisplayErrorExists","clearInput","id","for","onChange","e","target","value","onClick","tasksCopy","inputTaskNameCopy","trim","exists","empty","filter","task","status","forEach","filteredTask","name","toLowerCase","uuidv4","updateTask","removeTask","manageTask","selectedTask","action","alert","className","colSpan","TaskTable","length","map","reverse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","state","index","push","findIndex","splice","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b92feb3.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './css/FormTask.css';\r\n\r\nconst FormTask = ({tasks,addTask}) => {\r\n    const [inputTaskName,setInputTaskName] = useState(\"\");\r\n    const [displayErrorEmpty,setDisplayErrorEmpty] = useState(false);\r\n    const [displayErrorExists,setDisplayErrorExists] = useState(false);\r\n\r\n    const inputTaskNameChangeHandler = (e) => {\r\n        setInputTaskName(e.target.value);\r\n        setDisplayErrorEmpty(false);\r\n        setDisplayErrorExists(false);\r\n    }\r\n\r\n    const clearInput = () => {\r\n        setInputTaskName(\"\");\r\n        setDisplayErrorEmpty(false);\r\n        setDisplayErrorExists(false);\r\n    }\r\n\r\n    const btnAddTaskClickHandler = () => {\r\n        const tasksCopy = [...tasks];\r\n        const inputTaskNameCopy = inputTaskName.trim();\r\n        let exists = false;\r\n        let empty = false;\r\n        let newTask = {};\r\n\r\n        if(inputTaskName === \"\"){\r\n        empty = true;\r\n        }\r\n\r\n        tasksCopy.filter(task => task.status === \"pending\").forEach(filteredTask => {\r\n        if(filteredTask.name.toLowerCase() === inputTaskNameCopy.toLowerCase()){\r\n            exists = true;\r\n        }\r\n        })\r\n\r\n        if(empty === true){\r\n            setDisplayErrorEmpty(true);\r\n        }\r\n\r\n        if(exists === true){\r\n            setDisplayErrorExists(true);\r\n        }\r\n        \r\n        if(exists === false && empty === false){\r\n            newTask = {id:uuidv4(),name:inputTaskName,status:\"pending\"};\r\n            addTask(newTask);\r\n            clearInput();\r\n        }\r\n  }\r\n\r\n    return(\r\n        <div id=\"div-form-task\">\r\n            <h2>Add new task</h2>\r\n            <label for=\"input-task-name\">Task Name</label>\r\n            <input type=\"text\" onChange={inputTaskNameChangeHandler} value={inputTaskName} />\r\n            {displayErrorEmpty===true ? <p><small>Empty field.</small></p> : \"\"}\r\n            {displayErrorExists===true ? <p><small>Task already exists.</small></p> : \"\"}\r\n            <div>\r\n            <button id=\"btn-add-task\" onClick={btnAddTaskClickHandler}>Add Task</button>\r\n            <button id=\"btn-clear\" onClick={clearInput}>Clear</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nconst mapStateToProps = ({tasks}) =>{\r\n    return{\r\n        tasks,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch =>{\r\n    return{\r\n        addTask: (newTask) => dispatch({type:\"addTask\", newTask:newTask})\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(FormTask);","import \"./css/TaskRow.css\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst TaskRow = ({ tasks, task, status, updateTask, removeTask }) => {\r\n\tconst manageTask = (selectedTask, action) => {\r\n\t\tif (action === \"update\") {\r\n\t\t\tupdateTask(task);\r\n\t\t\talert(`${selectedTask.name} task status updated to done.`);\r\n\t\t} else if (action === \"remove\") {\r\n\t\t\tremoveTask(task);\r\n\t\t\talert(`${selectedTask.name} task removed.`);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<tr>\r\n\t\t\t{status === \"pending\" ? (\r\n\t\t\t\t<td className=\"td-pending-first-col\">\r\n\t\t\t\t\t<span className=\"bullet\">&#9679;</span>\r\n\t\t\t\t\t{task.name}\r\n\t\t\t\t</td>\r\n\t\t\t) : null}\r\n\r\n\t\t\t{status === \"pending\" ? (\r\n\t\t\t\t<td className=\"td-pending-second-col\">\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tmanageTask(task, \"update\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<i className=\"fas fa-check-circle\"></i>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tmanageTask(task, \"remove\");\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<i className=\"fas fa-times-circle\"></i>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</td>\r\n\t\t\t) : null}\r\n\t\t\t{status === \"done\" ? (\r\n\t\t\t\t<td colSpan=\"2\">\r\n\t\t\t\t\t<span className=\"bullet\">&#9679;</span>\r\n\t\t\t\t\t{task.name}\r\n\t\t\t\t</td>\r\n\t\t\t) : null}\r\n\t\t</tr>\r\n\t);\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tupdateTask: (task) => dispatch({ type: \"updateTask\", task: task }),\r\n\t\tremoveTask: (task) => dispatch({ type: \"removeTask\", task: task }),\r\n\t};\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(TaskRow);\r\n","import TaskRow from './TaskRow';\r\nimport './css/TaskTable.css';\r\n\r\nconst TaskTable = ({tasks,status}) => {\r\n    return(\r\n        <div id=\"div-task-table\">\r\n            {tasks.length === 0 ? <p><strong>{status} task empty</strong></p>:\r\n                <table>\r\n                    <thead>\r\n                        <th colSpan=\"2\"><h2>{status} tasks</h2></th>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tasks.map(task => <TaskRow \r\n                        tasks={tasks}\r\n                        task={task}\r\n                        status={status} \r\n                        />)}\r\n                        \r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskTable;","import FormTask from './components/FormTask';\nimport TaskTable from './components/TaskTable';\nimport './App.css';\nimport { connect } from 'react-redux';\n\nconst App = ({tasks}) => {\n\n  return(\n    <div id=\"div-app\">\n\n      <FormTask />\n\n      <div id=\"div-table-pending-tasks\">\n        <TaskTable \n          tasks={tasks.filter(task => task.status === \"pending\")} \n          status=\"pending\" />\n      </div>\n\n      <div id=\"div-table-done-tasks\">\n        <TaskTable tasks={tasks.reverse().filter(task => task.status === \"done\")} status=\"done\"/>\n      </div>\n\n    </div>\n  );\n}\n\nconst mapStateToProp = ({tasks}) =>{\n  return{\n    tasks,\n  }\n}\n\nexport default connect(mapStateToProp)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n    tasks:[],\r\n}\r\n\r\nconst reducer = (state = initialState,action) => {\r\n    let tasksCopy = [...state.tasks];\r\n    let index = -1;\r\n\r\n    switch(action.type){\r\n        case 'addTask':\r\n            tasksCopy.push(action.newTask);\r\n            return {\r\n                ...state,\r\n                tasks:tasksCopy,\r\n            }\r\n\r\n        case 'updateTask':\r\n            index = tasksCopy.findIndex(task => task.id === action.task.id);\r\n            tasksCopy[index].status = \"done\";\r\n            return {\r\n                ...state,\r\n                tasks:tasksCopy,\r\n            }\r\n\r\n        case 'removeTask':\r\n            index = tasksCopy.findIndex(task => task.id === action.task.id);\r\n            tasksCopy.splice(index,1)\r\n            return {\r\n                ...state,\r\n                tasks:tasksCopy,\r\n            }\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import { createStore } from 'redux';\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}